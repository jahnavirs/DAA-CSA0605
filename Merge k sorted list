import heapq

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    # Create a priority queue to store the nodes
    queue = []
for i, node in enumerate(lists):
        if node:
            # Push the node value and the list index into the queue
            heapq.heappush(queue, (node.val, i, node))

    # Create a dummy node to serve as the head of the merged list
    dummy = ListNode()
    current = dummy

    # While the queue is not empty
    while queue:
        # Pop the smallest node from the queue
        val, i, node = heapq.heappop(queue)
        # Add the node to the merged list
 current.next = node
        current = current.next
        # If the node has a next node, push it into the queue
        if node.next:
            heapq.heappush(queue, (node.next.val, i, node.next))

    # Return the merged list
    return dummy.next

