import heapq


class Node:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.freq < other.freq


def calculate_frequency(message):
    frequency = {}
    for char in message:
        frequency[char] = frequency.get(char, 0) + 1
    return frequency


def build_huffman_tree(frequency):
    priority_queue = []
    for char, freq in frequency.items():
        node = Node(char, freq)
        heapq.heappush(priority_queue, node)

    while len(priority_queue) > 1:
        node1 = heapq.heappop(priority_queue)
        node2 = heapq.heappop(priority_queue)
merged_node = Node(None, node1.freq + node2.freq)
        merged_node.left = node1
        merged_node.right = node2

        heapq.heappush(priority_queue, merged_node)

    return priority_queue[0]


def generate_huffman_codes(root, current_code, huffman_codes):
    if root.char is not None:
        huffman_codes[root.char] = current_code

    if root.left is not None:
        generate_huffman_codes(root.left, current_code + "0", huffman_codes)

    if root.right is not None:
        generate_huffman_codes(root.right, current_code + "1", huffman_codes)


def huffman_encoding(message):
    frequency = calculate_frequency(message)
    root = build_huffman_tree(frequency)
    huffman_codes = {}
    generate_huffman_codes(root, "", huffman_codes)
 encoded_message = ""
    for char in message:
        encoded_message += huffman_codes[char]

    return encoded_message, huffman_codes


def huffman_decoding(encoded_message, huffman_codes):
    reverse_huffman_codes = {value: key for key, value in huffman_codes.items()}
    decoded_message = ""
    temp = ""

    for bit in encoded_message:
        temp += bit
        if temp in reverse_huffman_codes:
            decoded_message += reverse_huffman_codes[temp]
            temp = ""

    return decoded_message


# Example usage
message = "this is an example for huffman encoding"
encoded_message, huffman_codes = huffman_encoding(message)
decoded_message = huffman_decoding(encoded_message, huffman_codes)

print("Huffman Codes:")
for char, code in huffman_codes.items():
    print(f"{char}: {code}")
print(f"Encoded Message: {encoded_message}")
print(f"Decoded Message: {decoded_message}")


