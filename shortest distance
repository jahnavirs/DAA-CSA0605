import sys
import heapq


def dijkstra(edges, num_vertices, source, target):
    """
    Returns the shortest distance and path from the source vertex to the target vertex.

    Args:
        edges (list): List of edges where each edge is a tuple (u, v, w).
        num_vertices (int): Number of vertices in the graph.
        source (int): Source vertex.
        target (int): Target vertex.

    Returns:
        tuple: Shortest distance and path from the source vertex to the target vertex.
    """

    # Initialize adjacency list
    graph = [[] for _ in range(num_vertices)]
    for u, v, w in edges:
        graph[u].append((v, w))
# Initialize distances and previous vertices
    distances = [sys.maxsize] * num_vertices
    distances[source] = 0
    previous = {source: None}

    # Initialize priority queue with source vertex
    pq = [(0, source)]

    while pq:
        # Extract vertex with minimum distance
        current_distance, current_vertex = heapq.heappop(pq)

        # If current distance is greater than already found distance, skip
        if current_distance > distances[current_vertex]:
            continue

        # If target vertex is reached, construct path
        if current_vertex == target:
            path = []
            while current_vertex is not None:
                path.append(current_vertex)
                current_vertex = previous.get(current_vertex)
            return distances[target], list(reversed(path))
  # Iterate over neighbors
        for neighbor, weight in graph[current_vertex]:
            # Calculate new distance
            new_distance = current_distance + weight

            # If new distance is less than already found distance, update
            if new_distance < distances[neighbor]:
                distances[neighbor] = new_distance
                previous[neighbor] = current_vertex
                heapq.heappush(pq, (new_distance, neighbor))

    # If target vertex is not reachable, return None
    return None
 Example usage
edges = [
    (0, 1, 4),
    (0, 7, 8),
    (1, 2, 8),
    (1, 7, 11),
    (2, 3, 7),
    (2, 8, 2),
    (2, 5, 4),
    (3, 4, 9),
    (3, 5, 14),
    (4, 5, 10),
    (5, 6, 2),
    (6, 7, 1),
    (6, 8, 6),
    (7, 8, 7)
]

num_vertices = 9
source = 0
target = 4

result = dijkstra(edges, num_vertices, source, target)

if result:
    distance, path = result
    print(f"Shortest distance from {source} to {target}: {distance}")
    print(f"Shortest path from {source} to {target}: {path}")
else:
    print(f"No path from {source} to {target}")

