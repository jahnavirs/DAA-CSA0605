from collections import defaultdict


def max_regions_to_color(graph, k):
    # Initialize colors
    colors = [0] * len(graph)

    # Function to check if a color is safe
    def is_safe(color, vertex):
        for neighbor in graph[vertex]:
            if colors[neighbor] == color:
                return False
        return True

    # Function to color the graph
    def color_graph(vertex, turn):
        if vertex == len(graph):
            return True

        for color in range(1, k + 1):
            if is_safe(color, vertex):
                colors[vertex] = color
                if turn == 0:  # Your turn
                    if color_graph(vertex + 1, 1):  # Alice's turn
                   return True
                elif turn == 1:  # Alice's turn
                    if color_graph(vertex + 1, 2):  # Bob's turn
                        return True
                else:  # Bob's turn
                    if color_graph(vertex + 1, 0):  # Your turn
                        return True
                colors[vertex] = 0

        return False

    # Color the graph
    color_graph(0, 0)

    # Count regions colored by you
    regions_colored_by_you = sum(1 for i, color in enumerate(colors) if color != 0 and i % 3 == 0)

    return regions_colored_by_you


# Test the function
n = 4
k = 3
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]

# Create adjacency list
graph = [[] for _ in range(n)]
for u, v in edges:
    graph[u].append(v)
    graph[v].append(u)
max_regions = max_regions_to_color(graph, k)
print(f"Maximum regions you can color: {max_regions}")

    
