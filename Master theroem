#Master Theroem

def master_theorem(a, b, f):
    if f == O(n^log_b(a)):
        return O(n^log_b(a))
    elif f == O(n^log_b(a - 1)):
        return O(n^log_b(a) / log(n))
    else:
        return O(n^log_b(a) * log(n)^k)
Substitution Method

def substitution_method(recurrence, initial_conditions):
    def solve(n):
        if n in initial_conditions:
            return initial_conditions[n]
        else:
            return recurrence(solve)
    return solve
Iteration Method

def iteration_method(recurrence, initial_conditions, n):
    result = initial_conditions
    for i in range(1, n + 1):
        result = recurrence(result)
    return result
    Time Complexity Calculation

def calculate_time_complexity(recurrence, initial_conditions, n):
    solve = substitution_method(recurrence, initial_conditions)
    return solve(n)




