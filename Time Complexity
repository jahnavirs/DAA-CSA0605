#include <stdio.h>
#include <time.h>

// Example algorithm 1: O(n)
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Example algorithm 2: O(n^2)
void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

// Example algorithm 3: O(log n)
int binarySearch(int arr[], int n, int target) {
    int left = 0;
    int right = n-1;
    while (left <= right) {
        int mid = left + (right-left)/2;
        if (arr[mid] == target) {
            return mid;
 } else if (arr[mid] < target) {
            left = mid+1;
        } else {
            right = mid-1;
        }
    }
    return -1;
}

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr)/sizeof(arr[0]);

    // Measure time complexity of printArray (O(n))
    clock_t start = clock();
    printArray(arr, n);
    clock_t end = clock();
    double time_taken = (double)(end - start) / CLOCKS_PER_SEC;
    printf("Time taken by printArray: %f seconds\n", time_taken);

    // Measure time complexity of bubbleSort (O(n^2))
    start = clock();
    bubbleSort(arr, n);
    end = clock();
    time_taken = (double)(end - start) / CLOCKS_PER_SEC;
    printf("Time taken by bubbleSort: %f seconds\n", time_taken);

    // Measure time complexity of binarySearch (O(log n))
    int target = 8;
    start = clock();
    int result = binarySearch(arr, n, target);
    end = clock();
    time_taken = (double)(end - start) / CLOCKS_PER_SEC;
    printf("Time taken by binarySearch: %f seconds\n", time_taken);

    return 0;
}
