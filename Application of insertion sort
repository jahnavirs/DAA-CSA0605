import random


class InsertionSort:
    def __init__(self, arr):
        self.arr = arr

    def sort(self):
        """
        Sorts the array using Insertion Sort.

        Returns:
            list: The sorted array.
        """
        for i in range(1, len(self.arr)):
            key = self.arr[i]
            j = i - 1
            while j >= 0 and self.arr[j] > key:
                self.arr[j + 1] = self.arr[j]
                j -= 1
            self.arr[j + 1] = key
        return self.arr
 Practical Applications
class EmbeddedSystem:
    def __init__(self, sensor_data):
        self.sensor_data = sensor_data

    def sort_sensor_data(self):
        insertion_sort = InsertionSort(self.sensor_data)
        return insertion_sort.sort()


class RealTimeSystem:
    def __init__(self, incoming_data):
        self.incoming_data = incoming_data

    def sort_incoming_data(self):
        insertion_sort = InsertionSort(self.incoming_data)
        return insertion_sort.sort()


class DatabaseQuery:
    def __init__(self, query_results):
        self.query_results = query_results

    def sort_query_results(self):
        insertion_sort = InsertionSort(self.query_results)
        return insertion_sort.sort()
# Example usage
if __name__ == "__main__":
    # Embedded System
    sensor_data = [random.randint(0, 100) for _ in range(10)]
    embedded_system = EmbeddedSystem(sensor_data)
    sorted_sensor_data = embedded_system.sort_sensor_data()
    print("Sorted Sensor Data:", sorted_sensor_data)

    # Real-Time System
    incoming_data = [random.randint(0, 100) for _ in range(10)]
    real_time_system = RealTimeSystem(incoming_data)
    sorted_incoming_data = real_time_system.sort_incoming_data()
    print("Sorted Incoming Data:", sorted_incoming_data)

    # Database Query
    query_results = [random.randint(0, 100) for _ in range(10)]
    database_query = DatabaseQuery(query_results)
    sorted_query_results = database_query.sort_query_results()
    print("Sorted Query Results:", sorted_query_results)

