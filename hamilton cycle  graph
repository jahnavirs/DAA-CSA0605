def is_hamiltonian_cycle(edges, n):
    # Create adjacency matrix
    graph = [[False] * n for _ in range(n)]
    for u, v in edges:
        graph[u][v] = graph[v][u] = True

    # Check if graph is complete
    if n < 3 or any(sum(row) < n - 1 for row in graph):
        return False

    # Function to find Hamiltonian cycle
    def find_hamiltonian_cycle(path):
        if len(path) == n:
            return graph[path[-1]][path[0]]

        for vertex in range(n):
            if graph[path[-1]][vertex] and vertex not in path:
                path.append(vertex)
                if find_hamiltonian_cycle(path):
                    return True
                path.pop()

        return False

    # Find Hamiltonian cycle
    for start_vertex in range(n):
        if find_hamiltonian_cycle([start_vertex]):
            return True

    return False
# Test the function
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2), (2, 0), (3, 1)]
n = 4
print(is_hamiltonian_cycle(edges, n))  # Output: True


edges = [(0, 1), (1, 2), (2, 3)]
n = 4
print(is_hamiltonian_cycle(edges, n))  # Output: False
