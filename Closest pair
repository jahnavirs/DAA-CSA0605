mport math

def distance(p1, p2):
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

def brute_force(points):
    min_distance = float('inf')
    closest_pair = None
    for i in range(len(points)):
        for j in range(i+1, len(points)):
            dist = distance(points[i], points[j])
            if dist < min_distance:
                min_distance = dist
                closest_pair = (points[i], points[j])
    return closest_pair, min_distance

def closest_pair(points):
    if len(points) <= 3:
        return brute_force(points)
 mid = len(points) // 2
    left_points = points[:mid]
    right_points = points[mid:]

    left_closest_pair, left_min_distance = closest_pair(left_points)
    right_closest_pair, right_min_distance = closest_pair(right_points)

    min_distance = min(left_min_distance, right_min_distance)
    closest_pair = left_closest_pair if left_min_distance < right_min_distance else right_closest_pair

    mid_x = points[mid][0]
    strip_points = [point for point in points if mid_x - min_distance <= point[0] <= mid_x + min_distance]

    strip_closest_pair, strip_min_distance = closest_split_pair(strip_points, min_distance)

    if strip_min_distance < min_distance:
        return strip_closest_pair, strip_min_distance
    else:
        return closest_pair, min_distance
def closest_split_pair(points, min_distance):
    closest_pair = None
    for i in range(len(points)):
        for j in range(i+1, min(len(points), i+7)):
            dist = distance(points[i], points[j])
            if dist < min_distance:
                min_distance = dist
                closest_pair = (points[i], points[j])
    return closest_pair, min_distance

# Example usage:
points = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
points.sort(key=lambda x: x[0])
closest_pair, min_distance = closest_pair(points)
print("Closest pair:", closest_pair)
print("Minimum distance:", min_distance)


