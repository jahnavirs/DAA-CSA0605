def graph_coloring(n, edges):
    # Create adjacency list
    graph = [[] for _ in range(n)]
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)

    # Initialize colors
    colors = [0] * n

    # Function to check if a color is safe
    def is_safe(color, vertex):
        for neighbor in graph[vertex]:
            if colors[neighbor] == color:
                return False
        return True

    # Function to color the graph
    def color_graph(vertex):
        if vertex == n:
            return True

        for color in range(1, n + 1):
            if is_safe(color, vertex):
                colors[vertex] = color
                if color_graph(vertex + 1):
                    return True
                colors[vertex] = 0

        return False
color_graph(0)

    # Print colored graph
    print("Colored Graph:")
    for i in range(n):
        print(f"Vertex {i}: Color {colors[i]}")

    # Return minimum number of colors used
    return len(set(colors))


# Test the function
n = 4
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
min_colors = graph_coloring(n, edges)
print(f"\nMinimum Number of Colors: {min_colors}")

