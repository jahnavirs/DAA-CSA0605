def max_degree_vertex_cover(graph):
    """
    Returns a vertex cover of the graph using the maximum degree heuristic.

    Args:
        graph (dict): Adjacency list representation of the graph.

    Returns:
        set: Vertex cover.
    """
    vertex_cover = set()
    graph_copy = graph.copy()

    while graph_copy:
        # Find vertex with maximum degree
        max_degree_vertex = max(graph_copy, key=lambda vertex: len(graph_copy[vertex]))

        # Add vertex to vertex cover
        vertex_cover.add(max_degree_vertex)
# Remove vertex and its incident edges
        for neighbor in graph_copy[max_degree_vertex]:
            if neighbor in graph_copy:
                del graph_copy[neighbor]

        # Remove vertex from graph
        del graph_copy[max_degree_vertex]

    return vertex_cover


# Example usage
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'C', 'D'],
    'C': ['A', 'B', 'D'],
    'D': ['B', 'C']
}

vertex_cover = max_degree_vertex_cover(graph)

print("Vertex Cover:", vertex_cover)
def is_vertex_cover(graph, vertex_cover):
    """
    Verifies if the given vertex cover is valid.

    Args:
        graph (dict): Adjacency list representation of the graph.
        vertex_cover (set): Vertex cover.

    Returns:
        bool: True if the vertex cover is valid, False otherwise.
    """
    for vertex in graph:
        for neighbor in graph[vertex]:
            if vertex not in vertex_cover and neighbor not in vertex_cover:
                return False

    return True


# Verify vertex cover
is_valid = is_vertex_cover(graph, vertex_cover)

print("Is Valid Vertex Cover?", is_valid)


